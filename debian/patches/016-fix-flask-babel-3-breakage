From: Paul Boddie <paul@boddie.org.uk>
Date: Sun, 10 Sep 2023 16:36:51 +0200
Subject: Updated Flask-Babel API usage for 3.0.

---
 src/moin/apps/frontend/views.py   |  2 +-
 src/moin/i18n/__init__.py         | 12 +++++-------
 src/moin/i18n/_tests/test_i18n.py |  4 ++--
 3 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/src/moin/apps/frontend/views.py b/src/moin/apps/frontend/views.py
index 7f78ff5..19421c7 100644
--- a/src/moin/apps/frontend/views.py
+++ b/src/moin/apps/frontend/views.py
@@ -2296,7 +2296,7 @@ def usersettings():
         # _timezones_keys = sorted(Locale('en').time_zones.keys())
         _timezones_keys = [str(tz) for tz in pytz.common_timezones]
         timezone = Select.using(label=L_('Timezone')).out_of((e, e) for e in _timezones_keys)
-        _supported_locales = [Locale('en')] + app.babel_instance.list_translations()
+        _supported_locales = [Locale('en')] + app.extensions['babel'].instance.list_translations()
         locale = Select.using(label=L_('Locale')).out_of(
             ((str(locale), locale.display_name) for locale in _supported_locales), sort_by=1)
         submit_label = L_('Save')
diff --git a/src/moin/i18n/__init__.py b/src/moin/i18n/__init__.py
index 1c69a6b..1a073fa 100644
--- a/src/moin/i18n/__init__.py
+++ b/src/moin/i18n/__init__.py
@@ -33,9 +33,7 @@ L_ = lazy_gettext
 
 def i18n_init(app):
     """ initialize Flask-Babel """
-    babel = Babel(app)
-    babel.localeselector(get_locale)
-    babel.timezoneselector(get_timezone)
+    babel = Babel(app, locale_selector=get_locale, timezone_selector=get_timezone)
 
 
 def get_locale():
@@ -56,7 +54,7 @@ def get_locale():
         except RuntimeError:  # CLI call has no valid request context
             cli_no_request_ctx = True
 
-        supported_locales = [Locale('en')] + current_app.babel_instance.list_translations()
+        supported_locales = [Locale('en')] + current_app.extensions['babel'].instance.list_translations()
         logging.debug("supported_locales = {0!r}".format(supported_locales))
         supported_languages = [str(locale) for locale in supported_locales]
         logging.debug("supported_languages = {0!r}".format(supported_languages))
@@ -96,16 +94,16 @@ def force_locale(locale):
         yield
         return
     babel = ctx.app.extensions['babel']
-    orig_locale_selector_func = babel.locale_selector_func
+    orig_locale_selector = babel.locale_selector
     orig_attrs = {}
     for key in ('babel_translations', 'babel_locale'):
         orig_attrs[key] = getattr(ctx, key, None)
     try:
-        babel.locale_selector_func = lambda: locale
+        babel.locale_selector = lambda: locale
         for key in orig_attrs:
             setattr(ctx, key, None)
         yield
     finally:
-        babel.locale_selector_func = orig_locale_selector_func
+        babel.locale_selector = orig_locale_selector
         for key, value in orig_attrs.items():
             setattr(ctx, key, value)
diff --git a/src/moin/i18n/_tests/test_i18n.py b/src/moin/i18n/_tests/test_i18n.py
index 232e5a4..d9115cd 100644
--- a/src/moin/i18n/_tests/test_i18n.py
+++ b/src/moin/i18n/_tests/test_i18n.py
@@ -41,12 +41,12 @@ def test_text():
 def test_force_locale():
     pytest.skip("This test needs to be run with --assert=reinterp or --assert=plain flag")
     app = Flask(__name__)
-    b = babel.Babel(app)
 
-    @b.localeselector
     def select_locale():
         return 'de_DE'
 
+    b = babel.Babel(app, locale_selector=select_locale)
+
     with app.test_request_context():
         assert str(babel.get_locale()) == 'de_DE'
         with force_locale('en_US'):
